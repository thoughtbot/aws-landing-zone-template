#!/bin/sh

set -e

if ! command -v aws > /dev/null; then
  echo "Please install the AWS cli and try again"
  exit 1
fi

if [ -f config.env ]; then
  export $(xargs < config.env)
fi

if [ ! -f "accounts.yaml" ]; then
  echo "Generating account list..."
  bin/render-template accounts.template.yaml accounts.yaml
  rm accounts.template.yaml

  printf "%s" "Edit accounts before deploying? (y/n) "
  IFS= read -r line

  if [ "$line" = "y" ]; then
    if [ -z "$EDITOR" ]; then
      echo "No \$EDITOR set." >&2
      echo "Aborting" >&2
      exit 1
    fi

    "$EDITOR" accounts.yaml
  fi
fi

STACK_NAME="aws-control-tower-accounts"
PRODUCT_NAME="AWS Control Tower Account Factory"

echo "Checking for account factory..."
PRODUCT_ID=$(aws servicecatalog \
  search-products \
  --filters "FullTextSearch=$PRODUCT_NAME" \
  --query "ProductViewSummaries[0].ProductId" \
  --output text)

if [ -z "$PRODUCT_ID" ]; then
  echo "Unable to find Control Tower account factory." >&2
  echo "Aborting." >&2
  exit 1
fi

echo "Found product: $PRODUCT_ID"

echo "Checking for latest version..."
ARTIFACT_ID=$(aws servicecatalog \
  describe-product \
  --id "$PRODUCT_ID" \
  --query "ProvisioningArtifacts[0].Id" \
  --output text)

if [ -z "$ARTIFACT_ID" ]; then
  echo "Unable to find Control Tower account factory." >&2
  echo "Aborting." >&2
  exit 1
fi

echo "Found artifact: $ARTIFACT_ID"

echo "Checking for accounts stack..."
DEPLOYED_STACK=$(aws cloudformation list-stacks \
  --query "StackSummaries[?StackName=='$STACK_NAME' && StackStatus!='DELETE_COMPLETE'].StackName" \
  --output text)

if [ "$DEPLOYED_STACK" = "$STACK_NAME" ]; then
  echo "Found accounts stack: $STACK_NAME"

  CHANGE_SET="$STACK_NAME-$(uuidgen)"
  echo "Creating changeset $CHANGE_SET..."
  changeset_arn=$(aws cloudformation create-change-set \
    --stack-name "$STACK_NAME" \
    --template-body file://accounts.yaml \
    --change-set-name "$CHANGE_SET" \
    --parameters \
    "ParameterKey=ProvisioningProductId,ParameterValue=$PRODUCT_ID" \
    "ParameterKey=ProvisioningArtifactId,ParameterValue=$ARTIFACT_ID" \
    "ParameterKey=SharedOrganizationalUnit,ParameterValue=$SHARED_OU" \
    "ParameterKey=WorkloadsOrganizationalUnit,ParameterValue=$WORKLOADS_OU" \
    "ParameterKey=SSOUserEmail,ParameterValue=$USER_EMAIL" \
    "ParameterKey=SSOUserFirstName,ParameterValue=$USER_FIRST_NAME" \
    "ParameterKey=SSOUserLastName,ParameterValue=$USER_LAST_NAME" \
    --query Id \
    --output text)

  aws cloudformation wait change-set-create-complete \
      --change-set-name "$CHANGE_SET" \
      --stack-name "$STACK_NAME" 2> /dev/null || echo "Change set not valid"

  changeset_changes=$(aws cloudformation describe-change-set \
    --change-set-name "$changeset_arn" \
    --query Changes \
    --output text)

  if [ -z "$changeset_changes" ]; then
    echo "No changes. Skipping."
  else
    echo "Applying changeset..."
    aws cloudformation execute-change-set \
      --change-set-name "$CHANGE_SET" \
      --stack-name "$STACK_NAME" \
      --disable-rollback
    echo "Waiting for stack completion..."
    aws cloudformation wait stack-update-complete \
      --stack-name "$STACK_NAME"
    echo "Stack is complete."
  fi
else
  echo "Accounts stack is not deployed."
  printf "%s" "Deploy now? (y/n): "
  IFS= read -r line

  if [ "$line" = "y" ]; then
    echo "Creating accounts stack..."
    STACK_ID=$(aws cloudformation create-stack \
      --region "$AWS_HOME_REGION" \
      --stack-name $STACK_NAME \
      --template-body file://accounts.yaml \
      --enable-termination-protection \
      --disable-rollback \
      --parameters \
      "ParameterKey=ProvisioningProductId,ParameterValue=$PRODUCT_ID" \
      "ParameterKey=ProvisioningArtifactId,ParameterValue=$ARTIFACT_ID" \
      "ParameterKey=SharedOrganizationalUnit,ParameterValue=$SHARED_OU" \
      "ParameterKey=WorkloadsOrganizationalUnit,ParameterValue=$WORKLOADS_OU" \
      "ParameterKey=SSOUserEmail,ParameterValue=$USER_EMAIL" \
      "ParameterKey=SSOUserFirstName,ParameterValue=$USER_FIRST_NAME" \
      "ParameterKey=SSOUserLastName,ParameterValue=$USER_LAST_NAME" \
      --tags "Key=Repository,Value=$GITHUB_ORGANIZATION/$LANDING_ZONE_REPO" \
      --query StackId \
      --output text)
    echo "Created stack $STACK_ID"
    echo "Waiting for stack completion..."
    aws cloudformation wait stack-create-complete --stack-name "$STACK_NAME"
    echo "Stack is complete."
  else
    echo "Aborting." >&2
    exit
  fi
fi
